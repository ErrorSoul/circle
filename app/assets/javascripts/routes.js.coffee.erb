
admin = angular.module( 'admin',['ngRoute','ngCookies', 'ngResource', 'ngSanitize'])



      


admin.config [
  '$httpProvider'
  '$routeProvider'
  '$locationProvider'
  '$provide'
  ($httpProvider, $routeProvider, $locationProvider, $provide) ->
  
    authToken = $("meta[name=csrf-token]").attr("content")
    $httpProvider.defaults.headers.common["X-CSRF-TOKEN"] = authToken
    # enabling html5Mode
    #$locationProvider.html5Mode true
    #$locationProvider.hashPrefix('!')
    
   

    
  
  
    
    #correct /admin/login html5 !
    # get "/"  
    
     
    $routeProvider
      .when '/login',
        templateUrl: "<%= asset_path('login.html') %>"
        controller: 'loginCtrl'

      .when '/dashboard',
        #templateUrl: '/assets/dash.html'
        #controller : "LocationController"
        templateUrl: "<%= asset_path('dashboard.html') %>"
        controller: 'DashboardCtrl'

      .when '/posts/new',
        templateUrl: "<%= asset_path('post_detail.html') %>"
        controller: "PostNewCtrl"

      .when '/posts/:id',
        templateUrl: "<%= asset_path('post_detail.html') %>"
        controller: "PostDetailCtrl"

      
]
`admin.run(function ($rootScope, $location, sessionStorage) {

  $rootScope.$on('$routeChangeStart', function (event, nextState) {
   console.log('change state');
   console.log(nextState, 'fffffnextfff')
   if (sessionStorage.authorized()){
    event.preventDefault();
    
  }else {
  $location.path('/login');
  }
     
    })
  });`


admin.service('fileUpload',  ['$http','$routeParams','Post', class FileUpload
  constructor: (@$http, @$routeParams, @Post) ->
    @fd = new FormData()
  createFormData: (post) ->
    
    @fd.append('post[title]', post.title)
    @fd.append('post[text]', post.text)
    @fd.append('post[asset]', post.asset)
    return @fd
    
  uploadFileToUrl: (post, callback) =>
    
    

    @Post.update({id: @$routeParams.id}, @createFormData(post), callback, (error) =>
      console.log(error) )

  createPost: (post, callback)  =>
    @Post.create({}, @createFormData(post), callback, (error) ->
      console.log(error) )
])



admin.directive('ngReallyClick', [ () ->
  restrict: 'A'
  link: (scope, elem, attrs) ->
    elem.bind('click', () ->
      message = attrs.ngReallyMessage
      if message and confirm(message)
        scope.$apply(attrs.ngReallyClick))
  
  ])

admin.directive('myEditor',['fileUpload', ( fileUpload) ->
  restrict: 'E'
  templateUrl: "<%= asset_path('title.html') %>"
  link:  (scope, element, attr) ->
        scope.input_check = true
        scope.flag = {}
        scope.flag.x = true
        
        foo = () ->
          scope.input_check = false
          scope.message = ""
          scope.$apply()
        
          
        scope.update = () ->
          scope.doc = (id) ->
            document.getElementById(id)
    
          scope.post.title = scope.doc('title').innerHTML 
          scope.post.text = scope.doc('text').innerHTML
          scope.post.asset = scope.doc('asset').files[0]
          scope.uploadFileToUrl(scope.post, (data) ->
            console.log(data, 'DaTA')
            scope.message = data.message or data.errors
            if data.url
              scope.post.asset.url = data.url
              scope.asset_url = data.url
              
            )
          scope.input_check = true
        
          
            

        `function Extension() {
          this.parent = true;

          this.button = document.createElement('button');
          this.button.className = 'medium-editor-action';
          this.button.innerText = 'X';
          this.button.onclick = this.onClick.bind(this);
          }

          Extension.prototype.getButton = function() {
          return this.button;
          };

          Extension.prototype.onClick = function() {
          alert('This is editor: #' + this.base.id);
          scope.showPopover()          
          
          
          };`


            
          

        
        
        
          
          
        scope.editor = new MediumEditor('.editable',
          buttons: ['bold','extension'],
          extensions:
          
            extension: new Extension()) 
        element.on('input', foo)
        angular.element('#asset').bind('change', foo)
     ])

admin.directive('myCustomer', () ->
     
      restrict: 'E'
      template: '<p ng-show="showMessage()"> {{message}} </p>'
      link:  (scope, element, attr) ->
        scope.showMessage = () ->
          console.log(scope.message, 'scope.message')
          console.log(scope.flag, 'SCOPE>FLAG')
          scope.message isnt undefined and scope.message.length >0 )

## mock class for test
admin.service("Mockach", [class X

    t: () -> return 3
    b: () -> return 4
  ]) 
###
first method to pass service in coffeescript
myClass = () ->

myClass.prototype.t = -> return 3


admin.service("Mockach", myClass)

#second method -------------------------
admin.service("Mockach", [class X

    t: () -> return 3
    b: () -> return 4
  ]) 
###
admin.service 'sessionStorage', ["$http",'$cookieStore', class Sessions

  constructor: (@$http, @$cookieStore) ->
    @_user = null
    @_authorized = false

  authorized: ->
    console.log(@$cookieStore.get('token') isnt null, 'GET {}')
    console.log(@$cookieStore.get('token'), 'GET')
    console.log((@_authorized is "true" or !! @$cookieStore.get('token')), 'authorized')
    @_authorized is "true" or (!!@$cookieStore.get('token'))
      
    

  setAuth: (status) ->
    @_authorized = status
    

  getUser:  ->
    @_user

  setUser: (user) ->
    if user
      @_user = {}
      @_user.id = user.id
      @_user.name = user.name
    else 
      @_user = user
    @$cookieStore.put('token', @_user)
    console.log(@_user, 'user!@')
    console.log(@$cookieStore.get('token'), "TOKEN")
    console.log(!!@$cookieStore.get('token'), "!!TOKEN")

  login: (newUser, callback)->
    @$http.post('/sessions', user: newUser).success(callback)
          .error((error) -> console.log(error))

  logout: (callback) ->
    @$http.delete('/sessions', id: 1).success(callback)
          .error((error) -> console.log(error))

  updateUser: (newUser, status) =>
    if status is "true"
      console.log(newUser, 'newuser')
      user = newUser
    else
      user = null
    @setUser(user)
    @setAuth(status)

  
 ]

admin.factory 'Post', ['$resource', ($resource) ->
  $resource('/posts/:id/:action', {id: '@id'},
    'query':
      method: 'GET'
      #isArray: true
      params: {}

    'update':
      method: 'PATCH'
      transformRequest: angular.identity
      headers: {'Content-Type': undefined}

    'create':
      method: 'POST'
      transformRequest: angular.identity
      headers: {'Content-Type': undefined}

    'remove':
      method: 'DELETE'
    
    
      
    
  
  


      )


  ]

#########################################
# controllers
######################################### 
admin.controller 'loginCtrl',["$scope", "$location","sessionStorage", ($scope, $location, sessionStorage) ->
        #debug --------------------
        #$scope.email = "EMAIL"
        $scope.user = {}
        $scope.user.email = "oleg@mail.ru"
        $scope.user.password = "leelovaya"
        # ------------------------
        
        $scope.EMAIL_REGEXP =  /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$/
        $scope.login = (user) ->
          
          $scope.user = {}
          sessionStorage.login(user, (data) ->
            sessionStorage.updateUser(data.user, data.authorized))
              .then(loginRequestHandler, loginErrorHandler)
            
            
            
    
        loginRequestHandler = (result) ->
          console.log($location.path(), "FFFFE")
          if sessionStorage.authorized()
            $location.path('/dashboard')
          else
            $scope.message = "Invalid login or password"

        loginErrorHandler = (error) ->
          $scope.message = "Error #{error}"

       
        $scope.showMessage = ->
          $scope.message isnt undefined and $scope.message.length >0
          

  
]

admin.controller "DashboardCtrl", ["$scope", '$location', "sessionStorage", "Post", ($scope, $location, sessionStorage, Post) ->
  Post.query().$promise.then((data)->
    console.log("DATA !", data)
    $scope.posts = data.posts
    ).then((data) ->
    console.log(data)
          
          
    )


  $scope.delete = (post) ->
    Post.remove({id: post.id}, (data) ->
      if data.message is "Your post deleted"
        $scope.message = data.message
        console.log(data, 'delete.data')
        post.hideValue = true)
  ]



admin.controller "PostDetailCtrl", ["$scope", "sessionStorage",'$routeParams', "Post", "fileUpload", ($scope, sessionStorage, $routeParams, Post, fileUpload) ->
  $scope.notNew = true
  Post.get({id: $routeParams.id, action: "edit" }, (data) ->
    $scope.post = data.post
    console.log('data', data.post)
    if data.post.asset
      $scope.asset_url = data.post.asset.url )

  $scope.uploadFileToUrl = fileUpload.uploadFileToUrl

  $scope.showPopover = () ->
    rect = document.getElementById('title').getBoundingClientRect()
    document.getElementById('pop-id').style.right = rect.right
    $scope.flag = !$scope.flag
  
  

  
  
  



  ]
       

admin.controller "PostNewCtrl", ["$scope", "sessionStorage", '$routeParams', "Post", "fileUpload", ($scope, sessionStorage,  $routeParams, Post, fileUpload) ->
  $scope.post = {}
  $scope.post.title = "Введи свой заголовок"
  $scope.post.text = "Введи свой текст"

  $scope.uploadFileToUrl = fileUpload.createPost 

  $scope.showPopover = () ->
    rect = document.getElementById('title').getBoundingClientRect()
    document.getElementById('pop-id').style.right = rect.right
    $scope.flag = !$scope.flag
   


  ]
       



admin.controller 'uploadCtrl', ["$scope", 'fileUpload', ($scope,fileUpload) ->
  $scope.f = () ->
    true
  $scope.fileUpload = fileUpload
  $scope.post = {}
  $scope.post.asset = "file"
  $scope.x = () ->
   console.log($scope.post.title, 'title')
   console.log($scope.post.text, 'text')
   file = document.getElementById('asset').files[0]
   console.log(file, 'file')
   $scope.post.asset = file
  
   fileUpload.uploadFileToUrl($scope.post)
   console.log($scope.post.asset.url, 'tttt')
  

  
  

  
  
  
  
  ]
